{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.edf07c41b635512db557.hot-update.js","sources":["webpack:///./lib/withApollo.tsx"],"sourcesContent":["import React from \"react\";\r\nimport cookie from \"cookie\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getDataFromTree } from \"react-apollo\";\r\nimport Head from \"next/head\";\r\n\r\nimport initApollo from \"./initApollo\";\r\nimport { isBrowser } from \"./isBrowser\";\r\nimport { ApolloClient, NormalizedCacheObject } from \"apollo-boost\";\r\n\r\nfunction parseCookies(req?: any, options = {}) {\r\n  return cookie.parse(\r\n    req ? req.headers.cookie || \"\" : document.cookie,\r\n    options\r\n  );\r\n}\r\n\r\nexport default (App: any) => {\r\n  return class WithData extends React.Component {\r\n    static displayName = `WithData(${App.displayName})`;\r\n    static propTypes = {\r\n      apolloState: PropTypes.object.isRequired\r\n    };\r\n\r\n    static async getInitialProps(ctx: any) {\r\n      const {\r\n        Component,\r\n        router,\r\n        ctx: { req, res }\r\n      } = ctx;\r\n      const apollo = initApollo(\r\n        {},\r\n        {\r\n          getToken: () => parseCookies(req).qid\r\n        }\r\n      );\r\n\r\n      ctx.ctx.apolloClient = apollo;\r\n\r\n      let appProps = {};\r\n      if (App.getInitialProps) {\r\n        appProps = await App.getInitialProps(ctx);\r\n      }\r\n\r\n      if (res && res.finished) {\r\n        // When redirecting, the response is finished.\r\n        // No point in continuing to render\r\n        return {};\r\n      }\r\n\r\n      if (!isBrowser) {\r\n        // Run all graphql queries in the component tree\r\n        // and extract the resulting data\r\n        try {\r\n          // Run all GraphQL queries\r\n          await getDataFromTree(\r\n            <App\r\n              {...appProps}\r\n              Component={Component}\r\n              router={router}\r\n              apolloClient={apollo}\r\n            />\r\n          );\r\n        } catch (error) {\r\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n          // Handle them in components via the data.error prop:\r\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n          console.error(\"Error while running `getDataFromTree`\", error);\r\n        }\r\n\r\n        // getDataFromTree does not call componentWillUnmount\r\n        // head side effect therefore need to be cleared manually\r\n        Head.rewind();\r\n      }\r\n\r\n      // Extract query data from the Apollo's store\r\n      const apolloState = apollo.cache.extract();\r\n\r\n      return {\r\n        ...appProps,\r\n        apolloState\r\n      };\r\n    }\r\n\r\n    apolloClient: ApolloClient<NormalizedCacheObject>;\r\n\r\n    constructor(prop: any) {\r\n      //@ts-ignore\r\n      super(props);\r\n      // `getDataFromTree` renders the component first, the client is passed off as a property.\r\n      // After that rendering is done using Next's normal rendering pipeline\r\n      //@ts-ignore\r\n      this.apolloClient = initApollo(props.apolloState, {\r\n        getToken: () => {\r\n          return parseCookies().token;\r\n        }\r\n      });\r\n    }\r\n\r\n    render() {\r\n      return <App {...this.props} apolloClient={this.apolloClient} />;\r\n    }\r\n  };\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAQA;AAIA;AAGA;AAAA;AAAA;AADA;AAKA;AAEA;AACA;AAtBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAuBA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAwCA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvCA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AA8CA;AACA;AACA;AACA;AACA;AAlDA;AAoDA;AACA;AACA;AACA;AAvDA;AAyDA;AACA;AA1DA;AA8DA;AA9DA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAmEA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAHA;AANA;AAWA;AACA;AAhFA;AAAA;AAAA;AAkFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAnFA;AACA;AADA;AAAA;AAGA;AADA;AAmFA;;;;A","sourceRoot":""}