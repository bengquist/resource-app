{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.1c179ad45aa1410e9921.hot-update.js","sources":["webpack:///./lib/initApollo.ts","webpack:///./node_modules/apollo-link-context/lib/bundle.esm.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport fetch from \"isomorphic-unfetch\";\r\n\r\nlet apolloClient = null;\r\n\r\n// Polyfill fetch() on the server (used by apollo-client)\r\nif (!process.browser) {\r\n  global.fetch = fetch;\r\n}\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem(\"token\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\"\r\n    }\r\n  };\r\n});\r\n\r\nfunction create(initialState) {\r\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n  return new ApolloClient({\r\n    connectToDevTools: process.browser,\r\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\r\n    link: new HttpLink({\r\n      uri: \"http://localhost:4000/graphql\", // Server URL (must be absolute)\r\n      credentials: \"same-origin\", // Additional fetch() options like `credentials` or `headers`\r\n      ...authLink\r\n    }),\r\n    cache: new InMemoryCache().restore(initialState || {})\r\n  });\r\n}\r\n\r\nexport default function initApollo(initialState) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (!process.browser) {\r\n    return create(initialState);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n","import { ApolloLink, Observable } from 'apollo-link';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\n\nvar setContext = function (setter) {\r\n    return new ApolloLink(function (operation, forward) {\r\n        var request = __rest(operation, []);\r\n        return new Observable(function (observer) {\r\n            var handle;\r\n            Promise.resolve(request)\r\n                .then(function (req) { return setter(req, operation.getContext()); })\r\n                .then(operation.setContext)\r\n                .then(function () {\r\n                handle = forward(operation).subscribe({\r\n                    next: observer.next.bind(observer),\r\n                    error: observer.error.bind(observer),\r\n                    complete: observer.complete.bind(observer),\r\n                });\r\n            })\r\n                .catch(observer.error.bind(observer));\r\n            return function () {\r\n                if (handle)\r\n                    handle.unsubscribe();\r\n            };\r\n        });\r\n    });\r\n};\n\nexport { setContext };\n//# sourceMappingURL=bundle.esm.js.map\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AAEA,aAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAFA;AAKA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}