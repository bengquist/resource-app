{"version":3,"file":"static/webpack/static\\development\\pages\\login.js.cd2f1c42528c23fd83e0.hot-update.js","sources":["webpack:///./pages/login.tsx"],"sourcesContent":["import cookie from \"cookie\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport Layout from \"../components/app/Layout\";\nimport gql from \"graphql-tag\";\nimport { Mutation } from \"react-apollo\";\nimport redirect from \"../lib/redirect\";\n\nconst Login: React.FunctionComponent = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const USER_LOGIN = gql`\n    mutation loginUser($email: String!, $password: String!) {\n      loginUser(email: $email, password: $password) {\n        token\n      }\n    }\n  `;\n\n  return (\n    <Layout title=\"Resource | Login\">\n      <Mutation\n        mutation={USER_LOGIN}\n        onCompleted={data => {\n          // Store the token in cookie\n          document.cookie = cookie.serialize(\"token\", data.loginUser.token, {\n            maxAge: 30 * 24 * 60 * 60 // 30 days\n          });\n\n          // Force a reload of all the current queries now that the user is\n          // logged in\n          // client.cache.reset().then(() => {\n          //   redirect({}, \"/\");\n          // });\n        }}\n        onError={error => {\n          // If you want to send error to external service?\n          console.log(error);\n        }}\n      >\n        {(loginUser, { loading, error, data }) => {\n          return (\n            <Form\n              onSubmit={e => {\n                e.preventDefault();\n                loginUser({\n                  variables: { email, password }\n                });\n                setEmail(\"\");\n                setPassword(\"\");\n              }}\n            >\n              <Label>Email</Label>\n              <Input\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                type=\"text\"\n              />\n              <Label>Password</Label>\n              <Input\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                type=\"password\"\n              />\n              <Button type=\"submit\">LOGIN</Button>\n            </Form>\n          );\n        }}\n      </Mutation>\n    </Layout>\n  );\n};\n\nexport default Login;\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.p``;\n\nconst Input = styled.input``;\n\nconst Button = styled.button`\n  margin-top: 20px;\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AAQA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}