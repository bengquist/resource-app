{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.c505871614c1be5a2d44.hot-update.js","sources":["webpack:///./lib/initApollo.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\r\nimport fetch from \"isomorphic-unfetch\";\r\n\r\nlet apolloClient = null;\r\n\r\n// Polyfill fetch() on the server (used by apollo-client)\r\nif (!process.browser) {\r\n  global.fetch = fetch;\r\n}\r\n\r\nfunction create(initialState) {\r\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n  return new ApolloClient({\r\n    connectToDevTools: process.browser,\r\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\r\n    link: new HttpLink({\r\n      uri: \"http://localhost:4000/graphql\", // Server URL (must be absolute)\r\n      credentials: \"same-origin\" // Additional fetch() options like `credentials` or `headers`\r\n    }),\r\n    cache: new InMemoryCache().restore(initialState || {})\r\n  });\r\n}\r\n\r\nexport default function initApollo(initialState) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (!process.browser) {\r\n    return create(initialState);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA,aAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAHA;AAIA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}