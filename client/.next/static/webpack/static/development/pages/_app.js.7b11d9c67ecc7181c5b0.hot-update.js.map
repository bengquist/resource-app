{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.7b11d9c67ecc7181c5b0.hot-update.js","sources":["webpack:///./lib/initApollo.ts"],"sourcesContent":["import {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  NormalizedCacheObject\r\n} from \"apollo-boost\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport fetch from \"isomorphic-unfetch\";\r\n// import console = require(\"console\");\r\n\r\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\r\n\r\nconst isBrowser: boolean = (process as any).browser;\r\n\r\ninterface Options {\r\n  getToken: () => string;\r\n}\r\n\r\n// Polyfill fetch() on the server (used by apollo-client)\r\nif (!isBrowser) {\r\n  global.fetch = fetch;\r\n}\r\n\r\nfunction create(initialState: any, { getToken }: Options) {\r\n  const authLink = setContext((_, { headers }) => {\r\n    const token = getToken();\r\n\r\n    const newHeaders = {\r\n      headers: {\r\n        ...headers,\r\n        cookie: token ? `token=${token}` : \"\"\r\n      }\r\n    };\r\n\r\n    console.log(newHeaders);\r\n\r\n    return newHeaders;\r\n  });\r\n\r\n  const httpLink = createHttpLink({\r\n    uri: \"http://localhost:4000/graphql\",\r\n    credentials: \"same-origin\"\r\n  });\r\n\r\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n  return new ApolloClient({\r\n    connectToDevTools: isBrowser,\r\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache().restore(initialState || {})\r\n  });\r\n}\r\n\r\nexport default function initApollo(initialState: any, options: Options) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (!isBrowser) {\r\n    return create(initialState, options);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState, options);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAFA;AADA;AAOA;AAEA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}