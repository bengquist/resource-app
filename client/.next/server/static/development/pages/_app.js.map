{"version":3,"file":"static\\development\\pages\\_app.js","sources":["webpack:///webpack/bootstrap","webpack:///./lib/initApollo.ts","webpack:///./lib/withApollo.tsx","webpack:///./pages/_app.tsx","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"apollo-boost\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"next/app\"","webpack:///external \"next/head\"","webpack:///external \"react\"","webpack:///external \"react-apollo\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { ApolloClient, InMemoryCache, HttpLink } from \"apollo-boost\";\r\nimport fetch from \"isomorphic-unfetch\";\r\n\r\nlet apolloClient = null;\r\n\r\n// Polyfill fetch() on the server (used by apollo-client)\r\nif (!process.browser) {\r\n  global.fetch = fetch;\r\n}\r\n\r\nfunction create(initialState) {\r\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\r\n  return new ApolloClient({\r\n    connectToDevTools: process.browser,\r\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\r\n    link: new HttpLink({\r\n      uri: \"http://localhost:4000/graphql\", // Server URL (must be absolute)\r\n      credentials: \"same-origin\" // Additional fetch() options like `credentials` or `headers`\r\n    }),\r\n    cache: new InMemoryCache().restore(initialState || {})\r\n  });\r\n}\r\n\r\nexport default function initApollo(initialState) {\r\n  // Make sure to create a new client for every server-side request so that data\r\n  // isn't shared between connections (which would be bad)\r\n  if (!process.browser) {\r\n    return create(initialState);\r\n  }\r\n\r\n  // Reuse client on the client-side\r\n  if (!apolloClient) {\r\n    apolloClient = create(initialState);\r\n  }\r\n\r\n  return apolloClient;\r\n}\r\n","import React from \"react\";\r\nimport initApollo from \"./initApollo\";\r\nimport Head from \"next/head\";\r\nimport { getDataFromTree } from \"react-apollo\";\r\n\r\nexport default App => {\r\n  return class Apollo extends React.Component {\r\n    static displayName = \"withApollo(App)\";\r\n    static async getInitialProps(ctx) {\r\n      const { Component, router } = ctx;\r\n\r\n      let appProps = {};\r\n      if (App.getInitialProps) {\r\n        appProps = await App.getInitialProps(ctx);\r\n      }\r\n\r\n      // Run all GraphQL queries in the component tree\r\n      // and extract the resulting data\r\n      const apollo = initApollo();\r\n      if (!process.browser) {\r\n        try {\r\n          // Run all GraphQL queries\r\n          await getDataFromTree(\r\n            <App\r\n              {...appProps}\r\n              Component={Component}\r\n              router={router}\r\n              apolloClient={apollo}\r\n            />\r\n          );\r\n        } catch (error) {\r\n          // Prevent Apollo Client GraphQL errors from crashing SSR.\r\n          // Handle them in components via the data.error prop:\r\n          // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\r\n          console.error(\"Error while running `getDataFromTree`\", error);\r\n        }\r\n\r\n        // getDataFromTree does not call componentWillUnmount\r\n        // head side effect therefore need to be cleared manually\r\n        Head.rewind();\r\n      }\r\n\r\n      // Extract query data from the Apollo store\r\n      const apolloState = apollo.cache.extract();\r\n\r\n      return {\r\n        ...appProps,\r\n        apolloState\r\n      };\r\n    }\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.apolloClient = initApollo(props.apolloState);\r\n    }\r\n\r\n    render() {\r\n      return <App {...this.props} apolloClient={this.apolloClient} />;\r\n    }\r\n  };\r\n};\r\n","import App, { Container } from \"next/app\";\r\nimport React from \"react\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport withApollo from \"../lib/withApollo\";\r\n\r\nclass MyApp extends App<any> {\r\n  render() {\r\n    const { Component, pageProps, apolloClient } = this.props;\r\n    return (\r\n      <Container>\r\n        <ApolloProvider client={apolloClient}>\r\n          <Component {...pageProps} />\r\n        </ApolloProvider>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withApollo(MyApp);\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"apollo-boost\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"next/app\");","module.exports = require(\"next/head\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAHA;AAIA;AAPA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAOA;AACA;AARA;AAUA;AACA;AACA;AACA;AAbA;AACA;AADA;AAAA;AAAA;AAmBA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AA7BA;AA+BA;AACA;AACA;AACA;AAlCA;AAoCA;AACA;AArCA;AAyCA;AAzCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AA4CA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;AAjDA;AAAA;AAAA;AAmDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AApDA;AACA;AADA;AAAA;AAsDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAVA;AACA;AAYA;;;;;;;;;;;;;;;;;;;;;;;AClBA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}